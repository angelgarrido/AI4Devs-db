// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Entidades de normalizaci√≥n
model StatusType {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  category      String        @db.VarChar(50) // 'position' o 'application'
  positions     Position[]
  applications  Application[]
}

model Address {
  id            Int           @id @default(autoincrement())
  street        String        @db.VarChar(100)
  city          String        @db.VarChar(100)
  state         String?       @db.VarChar(100)
  country       String        @db.VarChar(100)
  postalCode    String?       @db.VarChar(20)
  positions     Position[]
  candidates    Candidate[]
}

model EmploymentType {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  positions     Position[]
}

model ContactInfo {
  id            Int           @id @default(autoincrement())
  email         String?       @db.VarChar(255)
  phone         String?       @db.VarChar(20)
  positionId    Int           @unique
  position      Position      @relation(fields: [positionId], references: [id])
}

// Entidades principales
model Company {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  description   String?       @db.Text
  employees     Employee[]
  positions     Position[]
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  addressId         Int?
  address           Address?          @relation(fields: [addressId], references: [id])
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]

  @@index([email])
  @@index([addressId])
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Employee {
  id          Int        @id @default(autoincrement())
  companyId   Int
  name        String     @db.VarChar(100)
  email       String     @unique @db.VarChar(255)
  role        String     @db.VarChar(100)
  isActive    Boolean    @default(true)
  company     Company    @relation(fields: [companyId], references: [id])
  interviews  Interview[]

  @@index([companyId])
  @@index([email])
}

model Position {
  id                  Int           @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int
  addressId           Int
  employmentTypeId    Int
  statusId            Int
  title               String        @db.VarChar(100)
  description         String?       @db.Text
  isVisible           Boolean       @default(true)
  jobDescription      String?       @db.Text
  requirements        String?       @db.Text
  responsibilities    String?       @db.Text
  salaryMin           Decimal?      @db.Decimal(10,2)
  salaryMax           Decimal?      @db.Decimal(10,2)
  benefits            String?       @db.Text
  applicationDeadline DateTime?
  
  // Relaciones
  company             Company       @relation(fields: [companyId], references: [id])
  interviewFlow       InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  address             Address       @relation(fields: [addressId], references: [id])
  employmentType      EmploymentType @relation(fields: [employmentTypeId], references: [id])
  status              StatusType    @relation(fields: [statusId], references: [id])
  contactInfo         ContactInfo?
  applications        Application[]

  @@index([companyId, statusId])
  @@index([addressId])
  @@index([employmentTypeId])
  @@index([applicationDeadline])
  @@index([isVisible])
}

model InterviewFlow {
  id            Int             @id @default(autoincrement())
  description   String          @db.VarChar(255)
  positions     Position[]
  steps         InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId])
  @@index([orderIndex])
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(100)
  description String?         @db.Text
  steps       InterviewStep[]
}

model Application {
  id            Int         @id @default(autoincrement())
  positionId    Int
  candidateId   Int
  statusId      Int
  applicationDate DateTime  @default(now())
  notes         String?     @db.Text
  position      Position    @relation(fields: [positionId], references: [id])
  candidate     Candidate   @relation(fields: [candidateId], references: [id])
  status        StatusType  @relation(fields: [statusId], references: [id])
  interviews    Interview[]

  @@index([positionId])
  @@index([candidateId])
  @@index([statusId])
  @@index([applicationDate])
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate  DateTime
  result          String        @db.VarChar(50)
  score           Int?
  notes           String?       @db.Text
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
  @@index([interviewDate])
}